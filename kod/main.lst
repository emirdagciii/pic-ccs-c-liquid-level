CCS PCM C Compiler, Version 5.015, 5967               20-May-24 22:10

               Filename:   C:\Users\Taha\Desktop\OKUL BELGELER\CCS C ÇALIÞMALAR\Sývý seviyesi uygulamasý\kod\main.lst

               ROM used:   1049 words (13%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           43 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   35D
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA C4,22
0005:  DATA D0,27
0006:  DATA A0,29
0007:  DATA 45,2B
0008:  DATA C9,2C
0009:  DATA C5,29
000A:  DATA 49,1D
000B:  DATA 00,00
*
00B1:  MOVLW  8E
00B2:  MOVWF  77
00B3:  MOVF   29,W
00B4:  MOVWF  78
00B5:  MOVF   28,W
00B6:  MOVWF  79
00B7:  CLRF   7A
00B8:  MOVF   78,F
00B9:  BTFSS  03.2
00BA:  GOTO   0C5
00BB:  MOVF   79,W
00BC:  MOVWF  78
00BD:  CLRF   79
00BE:  MOVLW  08
00BF:  SUBWF  77,F
00C0:  MOVF   78,F
00C1:  BTFSS  03.2
00C2:  GOTO   0C5
00C3:  CLRF   77
00C4:  GOTO   0CD
00C5:  BCF    03.0
00C6:  BTFSC  78.7
00C7:  GOTO   0CC
00C8:  RLF    79,F
00C9:  RLF    78,F
00CA:  DECF   77,F
00CB:  GOTO   0C5
00CC:  BCF    78.7
00CD:  BCF    0A.3
00CE:  BCF    0A.4
00CF:  GOTO   3A2 (RETURN)
*
010E:  MOVF   0B,W
010F:  MOVWF  28
0110:  BCF    0B.7
0111:  BSF    03.5
0112:  BSF    03.6
0113:  BSF    0C.7
0114:  BSF    0C.0
0115:  NOP
0116:  NOP
0117:  BCF    03.5
0118:  BCF    03.6
0119:  BTFSC  28.7
011A:  BSF    0B.7
011B:  BSF    03.6
011C:  MOVF   0C,W
011D:  ANDLW  7F
011E:  BTFSC  03.2
011F:  GOTO   162
0120:  BCF    03.6
0121:  MOVWF  28
0122:  BSF    03.6
0123:  MOVF   0D,W
0124:  BCF    03.6
0125:  MOVWF  29
0126:  BSF    03.6
0127:  MOVF   0F,W
0128:  BCF    03.6
0129:  MOVWF  2A
012A:  MOVF   28,W
012B:  MOVWF  39
012C:  CALL   0E2
012D:  MOVF   29,W
012E:  BSF    03.6
012F:  MOVWF  0D
0130:  BCF    03.6
0131:  MOVF   2A,W
0132:  BSF    03.6
0133:  MOVWF  0F
0134:  BCF    03.6
0135:  MOVF   0B,W
0136:  MOVWF  2B
0137:  BCF    0B.7
0138:  BSF    03.5
0139:  BSF    03.6
013A:  BSF    0C.7
013B:  BSF    0C.0
013C:  NOP
013D:  NOP
013E:  BCF    03.5
013F:  BCF    03.6
0140:  BTFSC  2B.7
0141:  BSF    0B.7
0142:  BSF    03.6
0143:  RLF    0C,W
0144:  RLF    0E,W
0145:  ANDLW  7F
0146:  BTFSC  03.2
0147:  GOTO   162
0148:  BCF    03.6
0149:  MOVWF  28
014A:  BSF    03.6
014B:  MOVF   0D,W
014C:  BCF    03.6
014D:  MOVWF  29
014E:  BSF    03.6
014F:  MOVF   0F,W
0150:  BCF    03.6
0151:  MOVWF  2A
0152:  MOVF   28,W
0153:  MOVWF  39
0154:  CALL   0E2
0155:  MOVF   29,W
0156:  BSF    03.6
0157:  MOVWF  0D
0158:  BCF    03.6
0159:  MOVF   2A,W
015A:  BSF    03.6
015B:  MOVWF  0F
015C:  INCF   0D,F
015D:  BTFSC  03.2
015E:  INCF   0F,F
015F:  BCF    03.6
0160:  GOTO   10E
0161:  BSF    03.6
0162:  BCF    03.6
0163:  BCF    0A.3
0164:  BCF    0A.4
0165:  GOTO   3B5 (RETURN)
0166:  MOVF   39,W
0167:  BTFSC  03.2
0168:  GOTO   1D6
0169:  MOVWF  41
016A:  MOVF   3D,W
016B:  BTFSC  03.2
016C:  GOTO   1D6
016D:  ADDWF  41,F
016E:  BTFSC  03.0
016F:  GOTO   177
0170:  MOVLW  7F
0171:  SUBWF  41,F
0172:  BTFSS  03.0
0173:  GOTO   1D6
0174:  BTFSC  03.2
0175:  GOTO   1D6
0176:  GOTO   17B
0177:  MOVLW  81
0178:  ADDWF  41,F
0179:  BTFSC  03.0
017A:  GOTO   1D6
017B:  MOVF   41,W
017C:  MOVWF  77
017D:  CLRF   78
017E:  CLRF   79
017F:  CLRF   7A
0180:  MOVF   3A,W
0181:  MOVWF  45
0182:  BSF    45.7
0183:  MOVF   3B,W
0184:  MOVWF  44
0185:  MOVF   3C,W
0186:  MOVWF  43
0187:  MOVLW  18
0188:  MOVWF  41
0189:  CLRF   42
018A:  BTFSS  43.0
018B:  GOTO   1A4
018C:  MOVF   40,W
018D:  ADDWF  7A,F
018E:  BTFSS  03.0
018F:  GOTO   196
0190:  INCF   79,F
0191:  BTFSS  03.2
0192:  GOTO   196
0193:  INCF   78,F
0194:  BTFSC  03.2
0195:  BSF    42.7
0196:  MOVF   3F,W
0197:  ADDWF  79,F
0198:  BTFSS  03.0
0199:  GOTO   19D
019A:  INCF   78,F
019B:  BTFSC  03.2
019C:  BSF    42.7
019D:  MOVF   3E,W
019E:  MOVWF  3B
019F:  BSF    3B.7
01A0:  MOVF   3B,W
01A1:  ADDWF  78,F
01A2:  BTFSC  03.0
01A3:  BSF    42.7
01A4:  RLF    42,F
01A5:  RRF    78,F
01A6:  RRF    79,F
01A7:  RRF    7A,F
01A8:  RRF    45,F
01A9:  RRF    44,F
01AA:  RRF    43,F
01AB:  BCF    03.0
01AC:  DECFSZ 41,F
01AD:  GOTO   189
01AE:  MOVLW  01
01AF:  ADDWF  77,F
01B0:  BTFSC  03.0
01B1:  GOTO   1D6
01B2:  BTFSC  78.7
01B3:  GOTO   1BB
01B4:  RLF    45,F
01B5:  RLF    7A,F
01B6:  RLF    79,F
01B7:  RLF    78,F
01B8:  DECF   77,F
01B9:  BTFSC  03.2
01BA:  GOTO   1D6
01BB:  BTFSS  45.7
01BC:  GOTO   1CC
01BD:  INCF   7A,F
01BE:  BTFSS  03.2
01BF:  GOTO   1CC
01C0:  INCF   79,F
01C1:  BTFSS  03.2
01C2:  GOTO   1CC
01C3:  INCF   78,F
01C4:  BTFSS  03.2
01C5:  GOTO   1CC
01C6:  RRF    78,F
01C7:  RRF    79,F
01C8:  RRF    7A,F
01C9:  INCF   77,F
01CA:  BTFSC  03.2
01CB:  GOTO   1D6
01CC:  MOVF   3A,W
01CD:  MOVWF  42
01CE:  MOVF   3E,W
01CF:  XORWF  42,F
01D0:  BTFSS  42.7
01D1:  GOTO   1D4
01D2:  BSF    78.7
01D3:  GOTO   1DA
01D4:  BCF    78.7
01D5:  GOTO   1DA
01D6:  CLRF   77
01D7:  CLRF   78
01D8:  CLRF   79
01D9:  CLRF   7A
01DA:  RETURN
01DB:  BTFSC  03.1
01DC:  GOTO   1E0
01DD:  MOVLW  41
01DE:  MOVWF  04
01DF:  BCF    03.7
01E0:  CLRF   77
01E1:  CLRF   78
01E2:  CLRF   79
01E3:  CLRF   7A
01E4:  CLRF   41
01E5:  CLRF   42
01E6:  CLRF   43
01E7:  CLRF   44
01E8:  MOVF   40,W
01E9:  IORWF  3F,W
01EA:  IORWF  3E,W
01EB:  IORWF  3D,W
01EC:  BTFSC  03.2
01ED:  GOTO   21E
01EE:  MOVLW  20
01EF:  MOVWF  45
01F0:  BCF    03.0
01F1:  RLF    39,F
01F2:  RLF    3A,F
01F3:  RLF    3B,F
01F4:  RLF    3C,F
01F5:  RLF    41,F
01F6:  RLF    42,F
01F7:  RLF    43,F
01F8:  RLF    44,F
01F9:  MOVF   40,W
01FA:  SUBWF  44,W
01FB:  BTFSS  03.2
01FC:  GOTO   207
01FD:  MOVF   3F,W
01FE:  SUBWF  43,W
01FF:  BTFSS  03.2
0200:  GOTO   207
0201:  MOVF   3E,W
0202:  SUBWF  42,W
0203:  BTFSS  03.2
0204:  GOTO   207
0205:  MOVF   3D,W
0206:  SUBWF  41,W
0207:  BTFSS  03.0
0208:  GOTO   218
0209:  MOVF   3D,W
020A:  SUBWF  41,F
020B:  MOVF   3E,W
020C:  BTFSS  03.0
020D:  INCFSZ 3E,W
020E:  SUBWF  42,F
020F:  MOVF   3F,W
0210:  BTFSS  03.0
0211:  INCFSZ 3F,W
0212:  SUBWF  43,F
0213:  MOVF   40,W
0214:  BTFSS  03.0
0215:  INCFSZ 40,W
0216:  SUBWF  44,F
0217:  BSF    03.0
0218:  RLF    77,F
0219:  RLF    78,F
021A:  RLF    79,F
021B:  RLF    7A,F
021C:  DECFSZ 45,F
021D:  GOTO   1F0
021E:  MOVF   41,W
021F:  MOVWF  00
0220:  INCF   04,F
0221:  MOVF   42,W
0222:  MOVWF  00
0223:  INCF   04,F
0224:  MOVF   43,W
0225:  MOVWF  00
0226:  INCF   04,F
0227:  MOVF   44,W
0228:  MOVWF  00
0229:  RETURN
022A:  MOVF   04,W
022B:  MOVWF  31
022C:  MOVF   30,W
022D:  MOVWF  33
022E:  BTFSC  03.2
022F:  GOTO   249
0230:  MOVF   2F,W
0231:  MOVWF  3C
0232:  MOVF   2E,W
0233:  MOVWF  3B
0234:  MOVF   2D,W
0235:  MOVWF  3A
0236:  MOVF   2C,W
0237:  MOVWF  39
0238:  CLRF   40
0239:  CLRF   3F
023A:  MOVLW  20
023B:  MOVWF  3E
023C:  MOVLW  82
023D:  MOVWF  3D
023E:  CALL   166
023F:  MOVF   7A,W
0240:  MOVWF  2F
0241:  MOVF   79,W
0242:  MOVWF  2E
0243:  MOVF   78,W
0244:  MOVWF  2D
0245:  MOVF   77,W
0246:  MOVWF  2C
0247:  DECFSZ 33,F
0248:  GOTO   230
0249:  MOVF   2F,W
024A:  MOVWF  3C
024B:  MOVF   2E,W
024C:  MOVWF  3B
024D:  MOVF   2D,W
024E:  MOVWF  3A
024F:  MOVF   2C,W
0250:  MOVWF  39
0251:  MOVF   39,W
0252:  SUBLW  B6
0253:  MOVWF  39
0254:  CLRF   7A
0255:  MOVF   3A,W
0256:  MOVWF  3D
0257:  BSF    3A.7
0258:  BCF    03.0
0259:  RRF    3A,F
025A:  RRF    3B,F
025B:  RRF    3C,F
025C:  RRF    7A,F
025D:  RRF    79,F
025E:  RRF    78,F
025F:  RRF    77,F
0260:  DECFSZ 39,F
0261:  GOTO   258
0262:  BTFSS  3D.7
0263:  GOTO   26F
0264:  COMF   77,F
0265:  COMF   78,F
0266:  COMF   79,F
0267:  COMF   7A,F
0268:  INCF   77,F
0269:  BTFSC  03.2
026A:  INCF   78,F
026B:  BTFSC  03.2
026C:  INCF   79,F
026D:  BTFSC  03.2
026E:  INCF   7A,F
026F:  MOVF   7A,W
0270:  MOVWF  2F
0271:  MOVF   79,W
0272:  MOVWF  2E
0273:  MOVF   78,W
0274:  MOVWF  2D
0275:  MOVF   77,W
0276:  MOVWF  2C
0277:  BTFSS  2F.7
0278:  GOTO   286
0279:  DECF   31,F
027A:  BSF    31.5
027B:  COMF   2C,F
027C:  COMF   2D,F
027D:  COMF   2E,F
027E:  COMF   2F,F
027F:  INCF   2C,F
0280:  BTFSC  03.2
0281:  INCF   2D,F
0282:  BTFSC  03.2
0283:  INCF   2E,F
0284:  BTFSC  03.2
0285:  INCF   2F,F
0286:  MOVLW  3B
0287:  MOVWF  38
0288:  MOVLW  9A
0289:  MOVWF  37
028A:  MOVLW  CA
028B:  MOVWF  36
028C:  CLRF   35
028D:  MOVLW  0A
028E:  MOVWF  33
028F:  MOVF   30,W
0290:  BTFSC  03.2
0291:  INCF   31,F
0292:  BSF    03.1
0293:  MOVLW  2C
0294:  MOVWF  04
0295:  BCF    03.7
0296:  MOVF   2F,W
0297:  MOVWF  3C
0298:  MOVF   2E,W
0299:  MOVWF  3B
029A:  MOVF   2D,W
029B:  MOVWF  3A
029C:  MOVF   2C,W
029D:  MOVWF  39
029E:  MOVF   38,W
029F:  MOVWF  40
02A0:  MOVF   37,W
02A1:  MOVWF  3F
02A2:  MOVF   36,W
02A3:  MOVWF  3E
02A4:  MOVF   35,W
02A5:  MOVWF  3D
02A6:  CALL   1DB
02A7:  MOVF   78,W
02A8:  MOVF   77,F
02A9:  BTFSS  03.2
02AA:  GOTO   2BE
02AB:  INCF   30,W
02AC:  SUBWF  33,W
02AD:  BTFSC  03.2
02AE:  GOTO   2BE
02AF:  MOVF   31,W
02B0:  BTFSC  03.2
02B1:  GOTO   2C0
02B2:  ANDLW  0F
02B3:  SUBWF  33,W
02B4:  BTFSC  03.2
02B5:  GOTO   2B8
02B6:  BTFSC  03.0
02B7:  GOTO   2F0
02B8:  BTFSC  31.7
02B9:  GOTO   2F0
02BA:  BTFSC  31.6
02BB:  GOTO   2C0
02BC:  MOVLW  20
02BD:  GOTO   2EC
02BE:  MOVLW  20
02BF:  ANDWF  31,F
02C0:  BTFSS  31.5
02C1:  GOTO   2CE
02C2:  BCF    31.5
02C3:  MOVF   30,W
02C4:  BTFSS  03.2
02C5:  DECF   31,F
02C6:  MOVF   77,W
02C7:  MOVWF  31
02C8:  MOVLW  2D
02C9:  MOVWF  39
02CA:  CALL   0E2
02CB:  MOVF   31,W
02CC:  MOVWF  77
02CD:  CLRF   31
02CE:  MOVF   30,W
02CF:  SUBWF  33,W
02D0:  BTFSS  03.2
02D1:  GOTO   2DC
02D2:  MOVF   77,W
02D3:  MOVWF  31
02D4:  MOVLW  2E
02D5:  MOVWF  39
02D6:  CALL   0E2
02D7:  MOVF   31,W
02D8:  MOVWF  77
02D9:  MOVLW  20
02DA:  ANDWF  31,F
02DB:  MOVLW  00
02DC:  MOVLW  30
02DD:  BTFSS  31.5
02DE:  GOTO   2EC
02DF:  BCF    31.5
02E0:  MOVF   30,W
02E1:  BTFSS  03.2
02E2:  DECF   31,F
02E3:  MOVF   77,W
02E4:  MOVWF  31
02E5:  MOVLW  2D
02E6:  MOVWF  39
02E7:  CALL   0E2
02E8:  MOVF   31,W
02E9:  MOVWF  77
02EA:  CLRF   31
02EB:  MOVLW  30
02EC:  ADDWF  77,F
02ED:  MOVF   77,W
02EE:  MOVWF  39
02EF:  CALL   0E2
02F0:  BCF    03.1
02F1:  MOVF   38,W
02F2:  MOVWF  3C
02F3:  MOVF   37,W
02F4:  MOVWF  3B
02F5:  MOVF   36,W
02F6:  MOVWF  3A
02F7:  MOVF   35,W
02F8:  MOVWF  39
02F9:  CLRF   40
02FA:  CLRF   3F
02FB:  CLRF   3E
02FC:  MOVLW  0A
02FD:  MOVWF  3D
02FE:  CALL   1DB
02FF:  MOVF   7A,W
0300:  MOVWF  38
0301:  MOVF   79,W
0302:  MOVWF  37
0303:  MOVF   78,W
0304:  MOVWF  36
0305:  MOVF   77,W
0306:  MOVWF  35
0307:  DECFSZ 33,F
0308:  GOTO   292
0309:  BCF    0A.3
030A:  BCF    0A.4
030B:  GOTO   3DF (RETURN)
030C:  MOVF   29,W
030D:  MOVWF  30
030E:  MOVF   2D,W
030F:  XORWF  30,F
0310:  BTFSS  30.7
0311:  GOTO   317
0312:  BCF    03.2
0313:  BCF    03.0
0314:  BTFSC  29.7
0315:  BSF    03.0
0316:  GOTO   34A
0317:  MOVF   29,W
0318:  MOVWF  30
0319:  MOVF   2C,W
031A:  MOVWF  31
031B:  MOVF   28,W
031C:  SUBWF  31,F
031D:  BTFSC  03.2
031E:  GOTO   325
031F:  BTFSS  30.7
0320:  GOTO   34A
0321:  MOVF   03,W
0322:  XORLW  01
0323:  MOVWF  03
0324:  GOTO   34A
0325:  MOVF   2D,W
0326:  MOVWF  31
0327:  MOVF   29,W
0328:  SUBWF  31,F
0329:  BTFSC  03.2
032A:  GOTO   331
032B:  BTFSS  30.7
032C:  GOTO   34A
032D:  MOVF   03,W
032E:  XORLW  01
032F:  MOVWF  03
0330:  GOTO   34A
0331:  MOVF   2E,W
0332:  MOVWF  31
0333:  MOVF   2A,W
0334:  SUBWF  31,F
0335:  BTFSC  03.2
0336:  GOTO   33D
0337:  BTFSS  30.7
0338:  GOTO   34A
0339:  MOVF   03,W
033A:  XORLW  01
033B:  MOVWF  03
033C:  GOTO   34A
033D:  MOVF   2F,W
033E:  MOVWF  31
033F:  MOVF   2B,W
0340:  SUBWF  31,F
0341:  BTFSC  03.2
0342:  GOTO   349
0343:  BTFSS  30.7
0344:  GOTO   34A
0345:  MOVF   03,W
0346:  XORLW  01
0347:  MOVWF  03
0348:  GOTO   34A
0349:  BCF    03.0
034A:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4MHz) 
*
000C:  MOVLW  3A
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  4A
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETURN
....................  
....................  
....................  
.................... #define MOTOR_PIN PIN_C0 
....................  
....................  
.................... #define use_portb_lcd TRUE  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0039:  MOVLW  0F
003A:  BSF    03.5
003B:  ANDWF  06,W
003C:  IORLW  F0
003D:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003E:  BCF    03.5
003F:  BSF    06.2
....................    delay_cycles(1); 
0040:  NOP
....................    lcd_output_enable(1); 
0041:  BSF    06.0
....................    delay_cycles(1); 
0042:  NOP
....................    high = lcd_read_nibble(); 
0043:  CALL   02D
0044:  MOVF   78,W
0045:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
0046:  BCF    06.0
....................    delay_cycles(1); 
0047:  NOP
....................    lcd_output_enable(1); 
0048:  BSF    06.0
....................    delay_us(1); 
0049:  NOP
....................    low = lcd_read_nibble(); 
004A:  CALL   02D
004B:  MOVF   78,W
004C:  MOVWF  40
....................        
....................    lcd_output_enable(0); 
004D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004E:  MOVLW  0F
004F:  BSF    03.5
0050:  ANDWF  06,W
0051:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0052:  BCF    03.5
0053:  SWAPF  41,W
0054:  MOVWF  77
0055:  MOVLW  F0
0056:  ANDWF  77,F
0057:  MOVF   77,W
0058:  IORWF  40,W
0059:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002D:  MOVF   06,W
002E:  MOVWF  77
002F:  SWAPF  06,W
0030:  ANDLW  0F
0031:  MOVWF  78
....................   #endif 
0032:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0021:  SWAPF  41,W
0022:  ANDLW  F0
0023:  MOVWF  77
0024:  MOVLW  0F
0025:  ANDWF  06,W
0026:  IORWF  77,W
0027:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0028:  NOP
....................    lcd_output_enable(1); 
0029:  BSF    06.0
....................    delay_us(2); 
002A:  GOTO   02B
....................    lcd_output_enable(0); 
002B:  BCF    06.0
002C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0033:  BSF    03.5
0034:  BCF    06.0
....................    lcd_rs_tris(); 
0035:  BCF    06.1
....................    lcd_rw_tris(); 
0036:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0037:  BCF    03.5
0038:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005A:  MOVF   78,W
005B:  MOVWF  40
005C:  BTFSC  40.7
005D:  GOTO   039
....................    lcd_output_rs(address); 
005E:  BTFSS  3E.0
005F:  BCF    06.1
0060:  BTFSC  3E.0
0061:  BSF    06.1
....................    delay_cycles(1); 
0062:  NOP
....................    lcd_output_rw(0); 
0063:  BCF    06.2
....................    delay_cycles(1); 
0064:  NOP
....................    lcd_output_enable(0); 
0065:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0066:  SWAPF  3F,W
0067:  MOVWF  40
0068:  MOVLW  0F
0069:  ANDWF  40,F
006A:  MOVF   40,W
006B:  MOVWF  41
006C:  CALL   021
....................    lcd_send_nibble(n & 0xf); 
006D:  MOVF   3F,W
006E:  ANDLW  0F
006F:  MOVWF  40
0070:  MOVWF  41
0071:  CALL   021
0072:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0073:  MOVLW  28
0074:  MOVWF  29
0075:  MOVLW  0C
0076:  MOVWF  2A
0077:  MOVLW  01
0078:  MOVWF  2B
0079:  MOVLW  06
007A:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007B:  BCF    06.0
....................    lcd_output_rs(0); 
007C:  BCF    06.1
....................    lcd_output_rw(0); 
007D:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007E:  MOVLW  0F
007F:  BSF    03.5
0080:  ANDWF  06,W
0081:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0082:  BCF    06.0
....................    lcd_rs_tris(); 
0083:  BCF    06.1
....................    lcd_rw_tris(); 
0084:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0085:  MOVLW  0F
0086:  BCF    03.5
0087:  MOVWF  3A
0088:  CALL   00C
....................    for(i=1;i<=3;++i) 
0089:  MOVLW  01
008A:  MOVWF  28
008B:  MOVF   28,W
008C:  SUBLW  03
008D:  BTFSS  03.0
008E:  GOTO   097
....................    { 
....................        lcd_send_nibble(3); 
008F:  MOVLW  03
0090:  MOVWF  41
0091:  CALL   021
....................        delay_ms(5); 
0092:  MOVLW  05
0093:  MOVWF  3A
0094:  CALL   00C
0095:  INCF   28,F
0096:  GOTO   08B
....................    } 
....................     
....................    lcd_send_nibble(2); 
0097:  MOVLW  02
0098:  MOVWF  41
0099:  CALL   021
....................    delay_ms(5); 
009A:  MOVLW  05
009B:  MOVWF  3A
009C:  CALL   00C
....................    for(i=0;i<=3;++i) 
009D:  CLRF   28
009E:  MOVF   28,W
009F:  SUBLW  03
00A0:  BTFSS  03.0
00A1:  GOTO   0AE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A2:  MOVLW  29
00A3:  ADDWF  28,W
00A4:  MOVWF  04
00A5:  BCF    03.7
00A6:  MOVF   00,W
00A7:  MOVWF  2D
00A8:  CLRF   3E
00A9:  MOVF   2D,W
00AA:  MOVWF  3F
00AB:  CALL   033
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AC:  INCF   28,F
00AD:  GOTO   09E
00AE:  BCF    0A.3
00AF:  BCF    0A.4
00B0:  GOTO   396 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
00D0:  DECFSZ 3B,W
00D1:  GOTO   0D3
00D2:  GOTO   0D6
....................       address=LCD_LINE_TWO; 
00D3:  MOVLW  40
00D4:  MOVWF  3C
00D5:  GOTO   0D7
....................    else 
....................       address=0; 
00D6:  CLRF   3C
....................       
....................    address+=x-1; 
00D7:  MOVLW  01
00D8:  SUBWF  3A,W
00D9:  ADDWF  3C,F
....................    lcd_send_byte(0,0x80|address); 
00DA:  MOVF   3C,W
00DB:  IORLW  80
00DC:  MOVWF  3D
00DD:  CLRF   3E
00DE:  MOVF   3D,W
00DF:  MOVWF  3F
00E0:  CALL   033
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E1:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00E2:  MOVF   39,W
00E3:  XORLW  07
00E4:  BTFSC  03.2
00E5:  GOTO   0F0
00E6:  XORLW  0B
00E7:  BTFSC  03.2
00E8:  GOTO   0F5
00E9:  XORLW  06
00EA:  BTFSC  03.2
00EB:  GOTO   0FD
00EC:  XORLW  02
00ED:  BTFSC  03.2
00EE:  GOTO   103
00EF:  GOTO   108
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F0:  MOVLW  01
00F1:  MOVWF  3A
00F2:  MOVWF  3B
00F3:  CALL   0D0
00F4:  GOTO   10D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F5:  CLRF   3E
00F6:  MOVLW  01
00F7:  MOVWF  3F
00F8:  CALL   033
....................                      delay_ms(2); 
00F9:  MOVLW  02
00FA:  MOVWF  3A
00FB:  CALL   00C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00FC:  GOTO   10D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00FD:  MOVLW  01
00FE:  MOVWF  3A
00FF:  MOVLW  02
0100:  MOVWF  3B
0101:  CALL   0D0
0102:  GOTO   10D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0103:  CLRF   3E
0104:  MOVLW  10
0105:  MOVWF  3F
0106:  CALL   033
0107:  GOTO   10D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0108:  MOVLW  01
0109:  MOVWF  3E
010A:  MOVF   39,W
010B:  MOVWF  3F
010C:  CALL   033
....................      #endif 
....................    } 
010D:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... float deger=0; 
.................... int calis=0,dur=0,durdur=0; 
....................  
....................  
....................  
.................... void motor_calis()  
.................... { 
....................     output_high(MOTOR_PIN);  
*
034B:  BCF    27.0
034C:  MOVF   27,W
034D:  BSF    03.5
034E:  MOVWF  07
034F:  BCF    03.5
0350:  BSF    07.0
0351:  BCF    0A.3
0352:  BCF    0A.4
0353:  GOTO   40F (RETURN)
.................... } 
....................  
.................... void motor_dur()  
.................... { 
....................     output_low(MOTOR_PIN);  
0354:  BCF    27.0
0355:  MOVF   27,W
0356:  BSF    03.5
0357:  MOVWF  07
0358:  BCF    03.5
0359:  BCF    07.0
035A:  BCF    0A.3
035B:  BCF    0A.4
035C:  GOTO   416 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
035D:  MOVF   03,W
035E:  ANDLW  1F
035F:  MOVWF  03
0360:  CLRF   23
0361:  CLRF   22
0362:  CLRF   21
0363:  CLRF   20
0364:  CLRF   24
0365:  CLRF   25
0366:  CLRF   26
0367:  MOVLW  FF
0368:  MOVWF  27
0369:  BSF    03.5
036A:  BSF    03.6
036B:  MOVF   09,W
036C:  ANDLW  C0
036D:  MOVWF  09
036E:  BCF    03.6
036F:  BCF    1F.4
0370:  BCF    1F.5
0371:  MOVLW  00
0372:  BSF    03.6
0373:  MOVWF  08
0374:  BCF    03.5
0375:  CLRF   07
0376:  CLRF   08
0377:  CLRF   09
0378:  BCF    03.7
.................... { 
....................    setup_adc_ports(sAN0); 
0379:  BSF    03.5
037A:  MOVF   09,W
037B:  ANDLW  C0
037C:  MOVWF  09
037D:  BCF    03.6
037E:  BCF    1F.4
037F:  BCF    1F.5
0380:  MOVLW  01
0381:  BSF    03.6
0382:  MOVWF  08
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0383:  BCF    03.5
0384:  BCF    03.6
0385:  BSF    1F.6
0386:  BSF    1F.7
0387:  BSF    03.5
0388:  BSF    1F.7
0389:  BCF    03.5
038A:  BSF    1F.0
....................    set_tris_a(0xFF); 
038B:  MOVLW  FF
038C:  BSF    03.5
038D:  MOVWF  05
....................    set_tris_c(0x00); 
038E:  MOVLW  00
038F:  MOVWF  07
0390:  BCF    03.5
0391:  MOVWF  27
....................    set_tris_b(0x00); 
0392:  BSF    03.5
0393:  MOVWF  06
....................    lcd_init(); 
0394:  BCF    03.5
0395:  GOTO   073
....................     
....................      
....................    while(TRUE) 
....................    { 
....................       deger= read_adc(); 
0396:  BSF    1F.1
0397:  BTFSC  1F.1
0398:  GOTO   397
0399:  MOVF   1E,W
039A:  MOVWF  7A
039B:  BSF    03.5
039C:  MOVF   1E,W
039D:  BCF    03.5
039E:  MOVWF  28
039F:  MOVF   1E,W
03A0:  MOVWF  29
03A1:  GOTO   0B1
03A2:  MOVF   7A,W
03A3:  MOVWF  23
03A4:  MOVF   79,W
03A5:  MOVWF  22
03A6:  MOVF   78,W
03A7:  MOVWF  21
03A8:  MOVF   77,W
03A9:  MOVWF  20
....................        lcd_gotoxy(1, 1); 
03AA:  MOVLW  01
03AB:  MOVWF  3A
03AC:  MOVWF  3B
03AD:  CALL   0D0
....................        printf(lcd_putc, "DEPO SEVIYESI:"); 
03AE:  MOVLW  04
03AF:  BSF    03.6
03B0:  MOVWF  0D
03B1:  MOVLW  00
03B2:  MOVWF  0F
03B3:  BCF    03.6
03B4:  GOTO   10E
....................      
....................        printf(lcd_putc,"\n%%%f",deger*0.09765625); 
03B5:  MOVF   23,W
03B6:  MOVWF  3C
03B7:  MOVF   22,W
03B8:  MOVWF  3B
03B9:  MOVF   21,W
03BA:  MOVWF  3A
03BB:  MOVF   20,W
03BC:  MOVWF  39
03BD:  CLRF   40
03BE:  CLRF   3F
03BF:  MOVLW  48
03C0:  MOVWF  3E
03C1:  MOVLW  7B
03C2:  MOVWF  3D
03C3:  CALL   166
03C4:  MOVF   7A,W
03C5:  MOVWF  2B
03C6:  MOVF   79,W
03C7:  MOVWF  2A
03C8:  MOVF   78,W
03C9:  MOVWF  29
03CA:  MOVF   77,W
03CB:  MOVWF  28
03CC:  MOVLW  0A
03CD:  MOVWF  39
03CE:  CALL   0E2
03CF:  MOVLW  25
03D0:  MOVWF  39
03D1:  CALL   0E2
03D2:  MOVLW  89
03D3:  MOVWF  04
03D4:  MOVF   2B,W
03D5:  MOVWF  2F
03D6:  MOVF   2A,W
03D7:  MOVWF  2E
03D8:  MOVF   29,W
03D9:  MOVWF  2D
03DA:  MOVF   28,W
03DB:  MOVWF  2C
03DC:  MOVLW  02
03DD:  MOVWF  30
03DE:  GOTO   22A
....................         
....................       if(deger<=512.0 && durdur==0) 
03DF:  MOVF   23,W
03E0:  MOVWF  2B
03E1:  MOVF   22,W
03E2:  MOVWF  2A
03E3:  MOVF   21,W
03E4:  MOVWF  29
03E5:  MOVF   20,W
03E6:  MOVWF  28
03E7:  CLRF   2F
03E8:  CLRF   2E
03E9:  CLRF   2D
03EA:  MOVLW  88
03EB:  MOVWF  2C
03EC:  CALL   30C
03ED:  BTFSC  03.0
03EE:  GOTO   3F1
03EF:  BTFSS  03.2
03F0:  GOTO   3F7
03F1:  MOVF   26,F
03F2:  BTFSS  03.2
03F3:  GOTO   3F7
....................       {  
....................       calis=1; durdur=1; 
03F4:  MOVLW  01
03F5:  MOVWF  24
03F6:  MOVWF  26
....................       } 
....................       if(deger==1023.0) 
03F7:  MOVF   23,W
03F8:  MOVWF  2B
03F9:  MOVF   22,W
03FA:  MOVWF  2A
03FB:  MOVF   21,W
03FC:  MOVWF  29
03FD:  MOVF   20,W
03FE:  MOVWF  28
03FF:  CLRF   2F
0400:  MOVLW  C0
0401:  MOVWF  2E
0402:  MOVLW  7F
0403:  MOVWF  2D
0404:  MOVLW  88
0405:  MOVWF  2C
0406:  CALL   30C
0407:  BTFSS  03.2
0408:  GOTO   40C
....................       {  
....................       dur=1; durdur=0; 
0409:  MOVLW  01
040A:  MOVWF  25
040B:  CLRF   26
....................       } 
....................       if(calis==1) 
040C:  DECFSZ 24,W
040D:  GOTO   410
....................       { 
....................       motor_calis(); calis=0; 
040E:  GOTO   34B
040F:  CLRF   24
....................       } 
....................       if(dur==1 && durdur==0) 
0410:  DECFSZ 25,W
0411:  GOTO   417
0412:  MOVF   26,F
0413:  BTFSS  03.2
0414:  GOTO   417
....................       { 
....................       motor_dur(); dur=0; 
0415:  GOTO   354
0416:  CLRF   25
....................       } 
0417:  GOTO   396
....................        
....................    } 
....................  
.................... } 
0418:  SLEEP

Configuration Fuses:
   Word  1: 2FE1   XT NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
